{"version":3,"sources":["store/searchResults/searchResultsSlice.ts","store/store.ts","components/Details/Details.tsx","components/Search/SearchResults/SearchResults.tsx","components/Search/Search.tsx","App.tsx","history/index.ts","index.tsx"],"names":["octokit","Octokit","initialState","results","loading","error","selected","undefined","fetchSearchResults","createAsyncThunk","queryString","a","request","q","response","data","searchResultsSlice","createSlice","name","reducers","select","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","items","rejected","message","actions","store","configureStore","reducer","searchResults","searchResultsReducer","useTypedSelector","useSelector","Details","searchResult","find","result","id","selectResult","className","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","description","stargazers_count","language","owner","login","columns","field","headerName","flex","renderHeader","SearchResults","history","useHistory","selectResults","selectError","searchStatus","selectLoading","dispatch","useDispatch","rows","map","repoName","stars","CircularProgress","size","role","pageSize","autoHeight","onRowClick","param","push","Search","useState","searchText","setSearchText","languageFilter","setLanguageFilter","sortBy","setSortBy","submitHandler","e","preventDefault","onSubmit","TextField","label","value","onChange","event","target","InputLabel","Select","labelId","displayEmpty","SelectDisplayProps","MenuItem","Button","type","variant","App","path","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af0a8968.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport type { RootState } from '../store'\r\nimport { Endpoints } from '@octokit/types';\r\nimport { Octokit } from '@octokit/rest';\r\n\r\n// The @octokit/types library allows us to build parameter/response data types for the REST API\r\ntype searchReposData = Endpoints['GET /search/repositories']['response']['data'];\r\ntype searchResults = searchReposData['items'];\r\ntype searchResult = searchResults[number];\r\n\r\n// Build an octokit object, the official github API library\r\nconst octokit = new Octokit();\r\n\r\ntype LoadingStatus = 'idle' | 'loading';\r\n\r\ninterface SearchResultsState {\r\n    results: searchResults;\r\n    loading: LoadingStatus;\r\n    error: string | null;\r\n    selected: number | undefined;\r\n}\r\n\r\nconst initialState: SearchResultsState = {\r\n    results: [],\r\n    loading: 'idle',\r\n    error: null,\r\n    selected: undefined,\r\n}\r\n\r\n// Create an async thunk to query our search results, and automatically\r\n// dispatch our fulfilled, pending, and rejected actions\r\nexport const fetchSearchResults = createAsyncThunk<\r\n    // Return type\r\n    searchReposData,\r\n    // Input type\r\n    string\r\n>(\r\n    'searchResults/fetchResults',\r\n    async (queryString: string) => {\r\n        const response = await octokit.request('GET /search/repositories', {\r\n            q: queryString,\r\n        });\r\n\r\n        return response.data;\r\n    }\r\n);\r\n\r\n// Create our searchResults slice\r\nexport const searchResultsSlice = createSlice({\r\n    name: 'searchResults',\r\n    initialState,\r\n    reducers: {\r\n        select: (state, action: PayloadAction<number>) => {\r\n            state.selected = action.payload;\r\n        },\r\n    },\r\n    // Our extraReducers will handle our fetchSearchResults automatically dispatched actions\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchSearchResults.pending, (state) => {\r\n            state.loading = 'loading';\r\n            state.error = null;\r\n        });\r\n        builder.addCase(fetchSearchResults.fulfilled, (state, action) => {\r\n            state.results = action.payload.items;\r\n            state.loading = 'idle';\r\n        });\r\n        builder.addCase(fetchSearchResults.rejected, (state, action) => {\r\n            state.error = action.error.message ?? null;\r\n            state.results = [];\r\n            state.loading = 'idle';\r\n        });    \r\n    },\r\n})\r\n\r\nexport const { select } = searchResultsSlice.actions;\r\n\r\n// Export our state selectors\r\nexport const selectLoading = (state: RootState): LoadingStatus => state.searchResults.loading;\r\nexport const selectError = (state: RootState): string | null => state.searchResults.error;\r\nexport const selectResults = (state: RootState): searchResults => state.searchResults.results;\r\nexport const selectResult = (state: RootState): searchResult | undefined => {\r\n    return state.searchResults.results.find(result => result.id === state.searchResults.selected);\r\n};\r\n\r\nexport default searchResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport searchResultsReducer from './searchResults/searchResultsSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n      searchResults: searchResultsReducer,\r\n    },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {searchResults: SearchResults}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import { Paper, Table, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { selectResult } from '../../store/searchResults/searchResultsSlice';\r\nimport { useTypedSelector } from '../../store/store';\r\nimport './Details.css'\r\n\r\nconst Details = (): JSX.Element => {\r\n    // Select our searchResult, if that fails display an error\r\n    const searchResult = useTypedSelector((state) => selectResult(state));\r\n\r\n    if (!searchResult) {\r\n        return <h1>Whoops, nothing selected!</h1>\r\n    }\r\n\r\n    return (\r\n        <div className='details'>\r\n            <TableContainer component={Paper}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>{searchResult.name}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>Description</TableCell>\r\n                            <TableCell>{searchResult.description}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>Stars</TableCell>\r\n                            <TableCell>{searchResult.stargazers_count}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>Language</TableCell>\r\n                            <TableCell>{searchResult.language}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>Owner Name</TableCell>\r\n                            <TableCell>{searchResult.owner.login}</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Details;","import { CircularProgress } from '@material-ui/core';\r\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { select, selectError, selectLoading, selectResults } from '../../../store/searchResults/searchResultsSlice';\r\nimport { useTypedSelector } from '../../../store/store';\r\nimport './SearchResults.css';\r\n\r\nconst Star = () => <StarBorderIcon />;\r\n\r\nconst columns: GridColDef[] = [\r\n    {field: 'repoName', headerName: 'Repository Name', flex: 1},\r\n    {\r\n        field: 'stars',\r\n        flex: .5,\r\n        renderHeader: Star,\r\n    },\r\n    {field: 'language', headerName: 'Language', flex: .75},\r\n];\r\n\r\nconst SearchResults = (): JSX.Element => {\r\n    const history = useHistory();\r\n    const searchResults = useTypedSelector((state) => selectResults(state));\r\n    const error = useTypedSelector((state) => selectError(state));\r\n    const searchStatus = useTypedSelector((state) => selectLoading(state));\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    // Build our data grid rows using our search results\r\n    const rows = searchResults.map(result => ({\r\n        id: result.id,\r\n        repoName: result.name,\r\n        stars: result.stargazers_count,\r\n        language: result.language,\r\n    }));\r\n    \r\n    // Select the row's id, then navigate to the details page\r\n    const rowClickHandler = (param: GridRowParams) => {\r\n        dispatch(select(param.id as number));\r\n        history.push('/details');\r\n    };\r\n\r\n    if (searchStatus === 'loading') {\r\n        return (\r\n            <div className='progress'>\r\n                <CircularProgress size={100} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='searchResults'>\r\n            {error ? <p className='error' role='alert'>Failed to fetch repositories: {error}</p> : null}\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={30}\r\n                autoHeight\r\n                onRowClick={rowClickHandler}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchResults;","import React, { useState } from 'react';\r\nimport { Button, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchSearchResults } from '../../store/searchResults/searchResultsSlice'\r\nimport SearchResults from './SearchResults/SearchResults';\r\nimport './Search.css';\r\n\r\n// Needed for TypeScript, allowing us to pass data-testid\r\ninterface MySelectDisplayProps extends React.HtmlHTMLAttributes<HTMLDivElement> {\r\n    'data-testid'?: string;\r\n}\r\n\r\nconst Search = (): JSX.Element => {\r\n    const [searchText, setSearchText] = useState('');\r\n    const [languageFilter, setLanguageFilter] = useState('');\r\n    const [sortBy, setSortBy] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const submitHandler = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        // Build our query string using our searchText, and optionally add the language filter\r\n        // and sort arguments\r\n        let queryString = searchText;\r\n        if (languageFilter) {\r\n            queryString += ` language:${languageFilter}`;\r\n        }\r\n        if (sortBy) {\r\n            queryString += ` sort:${sortBy}`\r\n        }\r\n        // Dispatch our async thunk, fetchSearchResults\r\n        dispatch(fetchSearchResults(queryString));\r\n    };\r\n\r\n    const handleSearchTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchText(event.target.value);\r\n    };\r\n\r\n    const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLanguageFilter(event.target.value);\r\n    };\r\n\r\n    const handleSortChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setSortBy(event.target.value as string);\r\n    };\r\n\r\n    return (\r\n        <div className='searchContainer'>\r\n            <form onSubmit={submitHandler} className='searchForm'>\r\n                <div className='formItem'>\r\n                    <TextField\r\n                        id='label'\r\n                        label='Search'\r\n                        value={searchText}\r\n                        onChange={handleSearchTextChange}\r\n                    />\r\n                </div>\r\n                <div className='formItem'>\r\n                    <TextField\r\n                        id='languageFilter'\r\n                        label='Language Filter'\r\n                        value={languageFilter}\r\n                        onChange={handleLanguageChange}\r\n                    />\r\n                </div>\r\n                <div className='formItem'>\r\n                    <InputLabel id='sortByLabel'>Sort By...</InputLabel>\r\n                    <Select\r\n                        labelId='sortByLabel'\r\n                        id='sortBy'\r\n                        value={sortBy}\r\n                        onChange={handleSortChange}\r\n                        displayEmpty\r\n                        SelectDisplayProps={{\r\n                            'data-testid': 'sortBy'\r\n                        } as MySelectDisplayProps}\r\n                    >\r\n                        <MenuItem value=''>Best Match</MenuItem>\r\n                        <MenuItem value='stars'>Stars</MenuItem>\r\n                    </Select>\r\n                </div>\r\n                <div className='formItem'>\r\n                    <Button type='submit' variant='outlined'>Submit</Button>\r\n                </div>\r\n            </form>\r\n            <div className='resultsContainer'>\r\n                <SearchResults />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import {\n    Switch,\n    Route\n} from 'react-router-dom'\nimport Details from './components/Details/Details'\nimport Search from './components/Search/Search'\n\nfunction App (): JSX.Element {\n    return (\n        <Switch>\n            <Route path=\"/details\">\n                <Details />\n            </Route>\n            <Route path=\"/\">\n                <Search />\n            </Route>\n        </Switch>\n    )\n}\n\nexport default App\n","import { createBrowserHistory, createMemoryHistory } from 'history';\r\n\r\nconst isTest = process.env.NODE_ENV === 'test';\r\n\r\nexport const history = isTest\r\n  ? createMemoryHistory({ initialEntries: ['/'] })\r\n  : createBrowserHistory();","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { Router } from 'react-router-dom';\nimport { history } from './history';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}